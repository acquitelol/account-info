function registerPlugin(o){window.enmity.plugins.registerPlugin(o)}window.enmity.modules.common.Constants,window.enmity.modules.common.Clipboard,window.enmity.modules.common.Assets,window.enmity.modules.common.Messages,window.enmity.modules.common.Clyde,window.enmity.modules.common.Avatars,window.enmity.modules.common.Native;const React=window.enmity.modules.common.React;window.enmity.modules.common.Dispatcher,window.enmity.modules.common.Storage;const Toasts=window.enmity.modules.common.Toasts;window.enmity.modules.common.Dialog,window.enmity.modules.common.Token,window.enmity.modules.common.REST,window.enmity.modules.common.Settings,window.enmity.modules.common.Users,window.enmity.modules.common.Navigation,window.enmity.modules.common.NavigationNative,window.enmity.modules.common.NavigationStack,window.enmity.modules.common.Theme,window.enmity.modules.common.Linking,window.enmity.modules.common.StyleSheet,window.enmity.modules.common.ColorMap,window.enmity.modules.common.Components,window.enmity.modules.common.Locale,window.enmity.modules.common.Profiles,window.enmity.modules.common.Lodash,window.enmity.modules.common.Logger,window.enmity.modules.common.Flux,window.enmity.modules.common.SVG,window.enmity.modules.common.Scenes,window.enmity.modules.common.Moment;const{components}=window.enmity;components.Alert,components.Button,components.FlatList,components.Image,components.ImageBackground,components.KeyboardAvoidingView,components.Modal,components.Pressable,components.RefreshControl,components.ScrollView,components.SectionList,components.StatusBar,components.StyleSheet,components.Switch,components.Text,components.TextInput,components.TouchableHighlight,components.TouchableOpacity,components.TouchableWithoutFeedback,components.Touchable;const View=components.View;components.VirtualizedList,components.Form,components.FormArrow,components.FormCTA,components.FormCTAButton,components.FormCardSection,components.FormCheckbox,components.FormDivider,components.FormHint,components.FormIcon;const FormInput=components.FormInput;components.FormLabel,components.FormRadio;const FormRow=components.FormRow,FormSection=components.FormSection;components.FormSelect,components.FormSubLabel;const FormSwitch=components.FormSwitch;components.FormTernaryCheckBox,components.FormText,components.FormTextColors,components.FormTextSizes;function get(o,e,n){return window.enmity.settings.get(o,e,n)}function getIDByName(o){return window.enmity.assets.getIDByName(o)}var Settings=({settings})=>React.createElement(View,null,React.createElement(FormSection,{title:"Connecting Settings"},React.createElement(FormInput,{value:settings.get("host","192.168.1.212"),onChange:o=>{o.split(".").length>=4&&(o.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/)?(Toasts.open({content:"Valid IP address",source:getIDByName("check")}),settings.set("host",o)):Toasts.open({content:"Invalid IP address",source:getIDByName("Small")}))},title:"Local IP Address",placeholder:"192.168.178.1"}),React.createElement(FormInput,{value:settings.get("port","8097"),onChange:o=>{o.length>0&&(o.match(/^\d{1,5}$/)?(settings.set("port",o),Toasts.open({content:"Valid Port",source:getIDByName("check")})):Toasts.open({content:"Invalid Port",source:getIDByName("Small")}))},title:"Port",placeholder:"8097"}),React.createElement(FormRow,{label:"Connect",trailing:FormRow.Arrow,onPress:()=>{let code=`window.__enmityConnectToDevTools({ host: "${get("ReactDevTools","host")}", port: ${get("ReactDevTools","port")} })`;Toasts.open({content:`Connecting to ${get("ReactDevTools","host")}`,source:getIDByName("check")}),eval(code)}})),React.createElement(FormSection,{title:"Experimental Settings"},React.createElement(FormRow,{label:"Auto Connect",trailing:React.createElement(FormSwitch,{value:settings.get("autoconnect",!1),onValueChange:o=>settings.set("autoconnect",o)})})),React.createElement(FormRow,{label:"If it doesn't connect, your PC's IP might be wrong use ipconfig in cmd"})),name="AccountInfo",version="Test 1.4.2",description="Shows Account Information and Account Assets.",authors=[{name:"acquite",id:"581573474296791211"}],color="#ff1f84",manifest={name,version,description,authors,color};const ReactDevTools={...manifest,onStart(){if(get("ReactDevTools","autoconnect")){let code=`window.__enmityConnectToDevTools({ host: "${get("ReactDevTools","host")}", port: ${get("ReactDevTools","port")} })`;Toasts.open({content:`Connecting to ${get("ReactDevTools","host")}`,source:getIDByName("check")}),eval(code)}},onStop(){},getSettingsPanel({settings:o}){return React.createElement(Settings,{settings:o})}};registerPlugin(ReactDevTools);
